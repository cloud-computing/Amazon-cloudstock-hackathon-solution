{"name":"Amazon Cloudstock","body":"# Cloudstock Amazon DynamoDB & S3 Hackathon.\r\n\r\nThis application shows how to create a Ruby on Rails application \r\nthat allows users to add information to a DynamoDB database, and to \r\npush and retrieve information from an S3 database. I included my own\r\ndatabase names but you should change these for yours. You should change\r\nthe initializer for your own secret and access keys.\r\n\r\n## Set Up\r\n\r\nTo set this up, as we won't use ActiveRecord, call:\r\n\r\n    rails new your_app_name --skip-active-record\r\n\r\nIn order to get the AWS Ruby functionality, add the 'aws-sdk' gem\r\nto your Gemfile and execute 'bundle install' to get everything set up.\r\n\r\n## Initializer \r\n\r\nSee config/initializers/aws.rb . This gets called when Rails is initiated\r\nand it will log you in, provided you give your Amazon access_key_id and\r\nsecret_access_key.\r\n\r\n## Model \r\n\r\nInstead of getting functionality from ActiveRecord, we must inherit from\r\nAWS::Record, then:\r\n\r\n    User < AWS::Record::HashModel \r\n\r\nThe attributes should be defined here, as:\r\n\r\n    string_attr :id //This is my primary key in DynamoDB, you may have another one\r\n    integer_attr :whatever_number\r\n    boolean_attr :whatever_boolean, :default => false\r\n\r\nIn order to write information to S3, we use the following command:\r\n\r\n    AWS::S3.new.buckets[:your_bucket_name].objects[id].write(your_object_in_s3.read)\r\n\r\nAnd to retrieve it we can use:\r\n\r\n    AWS::S3.new.buckets[:your_bucket_name].objects[id].url_for(:read)\r\n\r\nBe wary that you should implement some sort of mechanism to avoid making \r\ntoo many calls in order to avoid getting to your S3 quota quickly. \r\nIn this example there is a boolean attribute that takes care not to \r\ncall to the database if there is no image.\r\n\r\n## View \r\n\r\nI included a file_field caption in the form so that the users\r\ncan upload their photos to Amazon S3. This is only done whenever there\r\nis already an id in DynamoDB set for the record (if @user.id).\r\n\r\nIn order to show this photos I call the user model in index with (user.img)\r\nso that the image is retrieved from S3. Try to call this method only \r\nif you are sure that the record contains an image so you can avoid \r\nunnecessary calls to the database.\r\n\r\n## Routes \r\n\r\nDefault controller redirects to @user using the default Rails ids, \r\nwhich by convention are just integers. DynamoDB uses ids with hyphens, lowercase\r\nand uppercase alphanumeric characters, so you have to figure out a way\r\nto handle this in routes.rb. A regular expression works well:\r\n\r\n    resources :your_model, :id => /[a-z0-9-]*/ \r\n\r\n","tagline":"Implementation of Amazon DynamoDB and S3 push and retrieval of data using Ruby and Rails and the AWS SDK for Ruby.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}